{
    "collab_server" : "",
    "contents" : "# This script contains the functions for fitting the model to the\n# data and for plotting the results\n# Likelihood function takes the model output and the data and calculates the likelihood\n# subsParms just enables multiple parameters to be fitted and substituted back into the parameter list\n\n#***********Likelihood function**********************************\nnll.pois <- function(parms=tsetse_params(),dat=count.times,temps.yearmon=b.temps$yearmon){ \n  \n  if (parms$mu.a.k1 > 0.04 | parms$mu.a.k1 < 0.01 ) {         # penalise model fits where adult mortality at temperatures =< 25 is > 0.03\n    ll <- -1000000000\n  }else{                                                      # if mu.a.k1 parameter is < 0.03 proceed to run the model\n    \n    simulate <- simPop(parms=parms)                           # run the model and save output to object 'simulate'\n    simulate <- simulate[1831:22946,]\n    temps.yearmon <- temps.yearmon[1831:22946]\n      mean.tsetse <- round(dat$counts,0)     # round observed counts\n      \n      sim.date <- cbind.data.frame(A=simulate$A,yearmon=temps.yearmon)\n      est <- ddply(sim.date,.(yearmon),summarise,mean.sim=mean(A))  # take mean numbers for the month\n      est <- round(est$mean.sim[est$yearmon %in% dat$yearmon],0)\n  \n      subset <- sim.date$A[(sim.date$yearmon > as.yearmon(\"August 1970\"))& (sim.date$yearmon < as.yearmon(\"February 1990\"))]                       # take simulated counts between ~ 1970 and 1990\n        \n   #   mean.count <- mean(subset,na.rm=T)                            # average count for this period\n  #       \n   #    if(mean.count < 50)                                  # if the average is below 50 then penalise model\n    #       { ll <- -10000000\n     #    }else{                                             # otherwise go ahead and calculate log likelihood\n\n            ll <- sum(dpois(mean.tsetse,lambda=est,log=T))  # log likelihood assuming data are Poisson distributed\n      #   }\n  }\n  return(-ll)\n}\n#**********************************************************\n\n\n\n#********enable multiple parameters to be fit and substituted back in parameter list****\nsubsParms <- function(fit.params, fixed.params=tsetse_params())\n  \n  within(fixed.params, {\n    loggedParms <- names(fit.params)[grepl('log_', names(fit.params))]\n    \n    unloggedParms <- names(fit.params)[!grepl('log_', names(fit.params))]  \n    \n    for(nm in unloggedParms) assign(nm, as.numeric(fit.params[nm]))\n    \n    for(nm in loggedParms) assign(gsub('log_','',nm), exp(as.numeric(fit.params[nm])))\n    \n    rm(nm, loggedParms, unloggedParms)\n  })           \n\n                                                                                       ## Make likelihood a function of fixed and fitted parameters.\nobjFXN <- function(fit.params                                                          ## paramters to fit\n                   , fixed.params =tsetse_params()                                     ## fixed paramters\n                   , dat=count.times) {\n  parms <- subsParms(fit.params, fixed.params)\n  nll.pois(parms, dat = dat)                                                           ## then call likelihood function\n}\n#***************************************************************************************\n\n",
    "created" : 1528231729986.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3565418968",
    "id" : "90194CFA",
    "lastKnownWriteTime" : 1528263769,
    "last_content_update" : 1528263769722,
    "path" : "~/GitHub/tsetse_climate_change/r_3_fit_funcs.R",
    "project_path" : "r_3_fit_funcs.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}